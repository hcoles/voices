package org.pitest.g2p.core.pos;


// Reduced set of part of speech tags, mapped to
// from the larger set generated by opennlp. Hopefully
// this is the minimal set that is useful for distinguishing
// pronunciations of hetronyms
public enum Pos {
    OTHER("Other"),
    JJ("Adjective"),
    NN("Noun"),
    RB("Adverb"),
    SYM("Symbol"),
    VB("Verb, base form"),
    VBD("Verb, past tense"),
    VBP("Verb, non-3rd person singular present");


    Pos(String _forinfo) {
    }

    public static Pos fromString(String tag) {

        var x = ExpandedPos.fromString(tag).group;
      //  System.out.println("Pos.fromString: " + tag + " " + x);
        return x;
    }

}

// the full set that opennlp may return
// they are mapped to the reduced set, often in ways that make no grammatical sense
// to accommodate mislabeling by opennlp. Generally we have alternate pronunciations
// for verb forms, to this mapping pushed some other POS to be verbs
enum ExpandedPos {
    CC("Coordinating conjunction", Pos.OTHER),
    CD("Cardinal number", Pos.OTHER),
    DT("Determiner", Pos.VB), // VB gets confused with determiner eg in Abuse the dog
    EX("Existential there", Pos.OTHER),
    FW("Foreign word", Pos.OTHER),
    IN("Preposition or subordinating conjunction", Pos.VB), // VB gets confused with preposition eg in Abuse the dog
    JJ("Adjective", Pos.JJ),
    JJR("Adjective, comparative", Pos.JJ),
    JJS("Adjective, superlative", Pos.JJ),
    LS("List item marker", Pos.OTHER),
    MD("Modal", Pos.OTHER),
    NN("Noun, singular or mass", Pos.NN),
    NNS("Noun, plural", Pos.NN),
    NNP("Proper noun, singular", Pos.NN),
    NNPS("Proper noun, plural", Pos.NN),
    PDT("Predeterminer", Pos.OTHER),
    POS("Possessive ending", Pos.OTHER),
    PRP("Personal pronoun", Pos.OTHER),
    PRP$("Possessive pronoun", Pos.OTHER),
    RB("Adverb", Pos.RB),
    RBR("Adverb, comparative", Pos.RB),
    RBS("Adverb, superlative", Pos.RB),
    RP("Particle", Pos.OTHER),
    SYM("Symbol", Pos.SYM),
    TO("to", Pos.OTHER),
    UH("Interjection", Pos.OTHER),
    VB("Verb, base form", Pos.VB),
    VBD("Verb, past tense", Pos.VBD),
    VBG("Verb, gerund or present participle", Pos.VBP),
    VBN("Verb, past participle", Pos.VBD),
    VBP("Verb, non-3rd person singular present", Pos.VBP),
    VBZ("Verb, 3rd person singular present", Pos.VBP),
    WDT("Wh-determiner", Pos.OTHER),
    WP("Wh-pronoun", Pos.OTHER),
    WP$("Possessive wh-pronoun", Pos.OTHER),
    WRB("Wh-adverb", Pos.OTHER);

    final Pos group;

    ExpandedPos(String _forinfo, Pos group) {
        this.group = group;
    }

    public static ExpandedPos fromString(String tag) {
        if (isPunctuation(tag)) {
            return SYM;
        }
        try {
            return ExpandedPos.valueOf(tag);
        } catch (IllegalArgumentException e) {
            System.err.println("Unknown POS tag: " + tag);
            return SYM;
        }
    }

    private static boolean isPunctuation(String str) {
        return str.length() <= 1
                || str.equals("''")
                || str.equals("``")
                || str.startsWith("-");
    }
}
